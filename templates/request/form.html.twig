{% extends '@contact-core/layout_backend.html.twig' %}
{% import "@contact-core/macros/form_type.html.twig" as fields %}
{% import "@contact-core/macros/form_classic.html.twig" as forms %}

{% block shoulder %}
    {{ "Traitement de la requête d'un internaute" }}
{% endblock shoulder %}

{% block title %}
    <i class="fas mr-2 link--icon fa-clipboard-question"></i>
    Requêtes de
    <strong>{{ requete.getClient().getFullname() }}</strong> ({{ requete.getClient().getClient().getCourriel() }}) du
    <strong>{{ requete.createdAt|date("d/m/Y") }}</strong>
    {% if requete.isContactMe() != false %}
        <span style="color: red !important;" title="Contacter le client">
            <i class="fa fa-phone"></i> {{ requete.getClient().getTelephone() }}
        </span>

        <pre>
            {{ dump(isExtensionInstall('contactrendezvous'), isRouteDefined('custevts-new-meeting')) }}
        </pre>

        {% if isExtensionInstall('crmrdv') and isRouteDefined('custevts-new-meeting') %}
            {{ forms.btn('news_rdv', '<i class="fas fa-calendar-alt"></i>', {
                'class': 'button btn-success text-center', 'title': 'Prendre un rendez-vous',
                'event': 'onclick', 'codeJS': 'openInNewTab("'~
                path('new-meeting', {"customer": requete.getClient().getId(), "demande": requete.id})
                                                            ~'");',
            }) }}
        {% endif %}
    {% endif %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <!-- Bootstrap Font Icon CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">
    <style>
        .requete .cadre, .search form.cadre {
            border: solid 1px #565656;
        }

        .requete .label, .search .label {
            background-color: #dedede;
        }

        @media (min-width: 576px) {
            .modal-dialog {
                margin: 1.75rem auto;
                max-width: calc(100% - 3.5rem) !important;
            }
        }
    </style>
    <link rel="stylesheet" href="{{ asset('contact-assets/css/tom-select.default.css') }}"/>
    <link rel="stylesheet" href="{{ asset('contact-assets/css/contact-core.css') }}"/>
{% endblock %}

{% block main %}
    <div id="page" class="row">
        {# entête de traitement de la requete #}
        <div class="col-8 row m-0 mb-4 requete">
            <div class="col-12 cadre row m-0 p-0">
                <div class="col-3 m-0 label">
                    Sujet de la demande :
                </div>
                <div class="col-9 m-0 valeur">
                    {{ requete.getSujet() }}
                </div>
                <div class="col-3 m-0 label">
                    Postée le :
                </div>
                <div class="col-3 m-0 valeur">
                    {{ requete.getCreatedAt()|date("d/m/Y") }}
                </div>
                <div class="col-3 m-0 label">
                    Traitée depuis le :
                </div>
                <div class="col-3 m-0 valeur">
                    {{ requete.getTreatedAt() != NULL ? requete.getTReatedAt()|date("d/m/Y") :"" }}
                </div>
            </div>
            <div class="col-12 cadre row m-0 mt-3 p-0">
                <div class="col-12 m-0 label">
                    Demande proprement dite :
                </div>
                <div class="col-12 mt-2 mb-4 valeur">
                    {{ requete.getDemande() }}
                </div>
            </div>
        </div>
        <div class="col-4 row m-0 mb-4 search">
            {% if okRdv %}
                <h1>Contact-RDV
                </h1>
            {% endif %}

            <h3>Recherche dans les demandes et réponses</h3>
            {{ form_start(formS) }}
            {{ form_row(formS._token) }}
                <div class="col-12 row m-0 mt-2 p-0">
                    {{ fields.field(formS.searchText, "Chercher", {
                        'class': 'col-12 p-2 m-0', 'placeholder': 'Critère de recherche',
                        'il_class': {'label': 'col-4 p-0 m-0 pl-3', 'input': 'col-8 p-0 m-0 pl-3'},
                        'value': form.reponse.vars.data
                    }) }}
                </div>
                <div class="col-12 row m-0 mt-5 p-0">
                    <div class="col-6 row  m-0 p-2">
                        {{ fields.submitbtn(formS.submit, 'Exécuter la recherche', {
                            'class': 'col-12 btn btn-success text-white formS search',
                        }) }}
                    </div>
                    <div class="col-6 row  m-0 p-2">
                        {{ fields.submitbtn(formS.reset, "Supprimer les critères", {
                            'class': 'col-12 btn btn-primary text-white formS reset',
                        }) }}
                    </div>
                </div>
            {{ form_end(formS, {render_rest: false}) }}
            <div class="col-12 row search-results">
                <div class="model hidden col-12 row">
                    <input type="hidden" class="idx" value="[IDX]">
                    <div class="col-10 title">[TITRE]</div>
                    <div class="col-2 action">
                        <button class="btn btn-info view">
                            <i class="fa fa-eye"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        {{ form_start(form) }}
        {{ form_row(form._token) }}
        <div class="col-12 row m-0 mt-2 p-0">
            {{ fields.textarea(form.reponse, "Réponse", {
                'class': 'col-12 p-2 m-0', 'placeholder': 'Réponse à la requête', 'rows': 5, 'cols': 84,
                'tl_class': {'label': 'col-2 p-0 m-0 pl-3', 'textarea': 'col-10 p-0 m-0 pl-3'},
                'value': form.reponse.vars.data
            }) }}
        </div>
        <div class="col-12 row m-0 mt-2 p-0">
            {{ fields.select(form.categories, "Catégories", {
                'class': 'col-12 p-2 m-0 categories', 'placeholder': 'Choisissez ou saisissez une catégorie',
                'multiple': true, 'sl_class' : {'label': "col-4", 'select': 'col-8'}, 'choices': dbCategories,
            }) }}
        </div>
        <div class="col-12 row m-0 mt-5 p-0">
            <div class="col-3 row  m-0 p-2">
                {{ fields.submitbtn(form.record, '', {
                    'class': 'col-12 btn btn-success text-white',
                }) }}
            </div>
            <div class="col-3 row  m-0 p-2">
                {{ fields.submitbtn(form.send, "", {
                    'class': 'col-12 btn btn-primary text-white',
                }) }}
            </div>
            <div class="col-3 row  m-0 p-2">
                {{ fields.submitbtn(form.close, "", {
                    'class': 'col-12 btn btn-danger text-white',
                }) }}
            </div>
            <div class="col-3 row  m-0 p-2">
                {{ fields.submitbtn(form.cancel, "", {
                    'class': 'col-12 btn btn-bs-warning',
                }) }}
            </div>
        </div>
        {{ form_end(form, {render_rest: false}) }}
    </div>

    <div id="modal-model" class="hidden">
        <div class="modal-dialog modal-dialog-centered modal-fullscreen modal-dialog-scrollable ">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Demande de FULLNAME saisie le CREATEDAT</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row px-2">
                            <div class="demand_label col-3 h3">Demande</div>
                            <div class="demand_texte col-9 h5">DEMANDE</div>
                        </div>
                        <div class="row  my-2 p-2">
                            <div class="demand_label col-2 h3">Traitée le</div>
                            <div class="demand_texte col-2 h3">TREATEDAT</div>
                            <div class="demand_label col-2 h3">Envoyée le</div>
                            <div class="demand_texte col-2 h3">SENDAT</div>
                            <div class="demand_label col-2 h3">Clôturée le</div>
                            <div class="demand_texte col-2 h3">CLOSEDAT</div>
                        </div>
                        <div class="row px-2 pt-2">
                            <div class="operateur_label col-3 h3">Réponse de</div>
                            <div class="operateur_texte col-9 h3">RESPONDBY</div>
                        </div>
                        <div class="row mb-2 px-2 pb-2">
                            <div class="respond_label col-3 h3"></div>
                            <div class="respond_texte col-9 h5">RESPONSE</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-close" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="responseModal" tabindex="-1" aria-labelledby="responseModal" aria-hidden="true">
    </div>
{% endblock %}

{% block aside %}{{ parent() }}{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('contact-assets/js/bootstrap.min.js') }}"></script>
    <script src="{{ asset('contact-assets/js/tom-select.complete.js') }}"></script>
    <script>
        const $tomSelectObj = {};

        function initTomSelect(objSelect, options = {}) {
            $tomSelectObj[objSelect.id] = new TomSelect(objSelect, options);
        }

        const categories = document.querySelector(".categories select");
        if (categories) {
            initTomSelect(categories, {
                persist: false,
                createOnBlur: true,
                create: true
            });
        }
        const operateur = document.querySelector(".operateur select");
        if (operateur) {
            initTomSelect(operateur, {
                persist: false,
                createOnBlur: true,
                create: true,
                timeout: 10000
            });
        }

        const modalModel = document.querySelector("#modal-model");
        const myModal = document.querySelector("#responseModal");

        function docReady(fn) {
            // see if DOM is already available
            if (document.readyState === "complete" || document.readyState === "interactive") {
                // call on next available tick
                setTimeout(fn, 1);
            } else {
                document.addEventListener("DOMContentLoaded", fn);
            }
        }

        function openInNewTab(url) {
            window.open(url, '_blank').focus();
        }

        {% if errors is defined and errors is not empty %}
            {% for error in errors %}
                window.createNotification({
                    closeOnClick: true,
                    displayCloseButton: true,
                    positionClass: 'nfc-bottom-right',
                    showDuration: 3000,
                    theme: '{{ error.type }}-long'
                })({
                    title: '{{ error.title }}',
                    message: '{{ error.body }}'
                });
            {% endfor %}
        {% endif %}

        function showQR(evt) {
            let element = evt.target.parentElement.parentElement.parentElement;
            if (element.classList.contains("search-results")) {
                element = evt.target.parentElement.parentElement;
            }
            let idx = element.querySelector("input").value;
            // appel AJAX pour obtenir la question / réponse dans sa globalité
            let url = "{{ path('get-qr', {'id': 'ID'}) }}";
            console.log(url);
            url = url.replace('ID', idx);
            console.log(url);
            fetch(url, {method: "POST"})
            .then(res => {
                if (res.status != 200) { throw new Error("Bad Server Response"); }
                return res.text();
            })
            .then(res => {
                // remplacment des champs de la response dans le modal
                let html = modalModel.innerHTML;
                let results = JSON.parse(res);
                for (const key in results) {
                    console.log(key, results[key]);
                    html = html.replace(key.toUpperCase(), results[key]);
                }
                myModal.innerHTML = html;
                let modal = new bootstrap.Modal(myModal);
                modal.show();
                let modalBackrop = document.querySelector(".modal-backdrop");
                modalBackrop.innerHTML = myModal.innerHTML;
                modalBackrop.classList = myModal.classList;
            })
        }

        let formSbuttons = document.querySelectorAll('button.formS');
        for (var idx = 0; idx < formSbuttons.length; idx++) {
            formSbuttons[idx].addEventListener('click', function(event) {
                event.preventDefault();
                let formS = document.querySelector(".search form");
                if (event.target.classList.contains('reset')) {
                    // vidage des chanmps de recherches et résultats de recherche
                    formS.querySelector("input").value = "";
                    formS.querySelector(".search-results").innerHtml = "";
                } else if (event.target.classList.contains('search')) {
                    // exécution demande de recher Ajax
                    let datas = new FormData(formS)
                    fetch("{{ path('search_in_db') }}", {method: "POST", body: datas})
                    .then(res => {
                        if (res.status != 200) { throw new Error("Bad Server Response"); }
                        return res.text();
                    })
                    .then(res => {
                        // exploitation des résultats et affichage
                        let results = JSON.parse(res);
                        for (const key in results) {
                            let line = document.querySelector(".search-results .model");
                            let nLine = line.cloneNode(true);
                            nLine.querySelector("input").value = key;
                            nLine.querySelector(".title").innerHTML = results[key];
                            nLine.classList.remove("hidden");
                            nLine.querySelector("button").addEventListener('click', showQR);
                            line.parentElement.append(nLine);
                        }
                    })
                    .catch(err => console.error(err));
                }
            })
        }
    </script>
{% endblock %}
